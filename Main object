#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <string>

class Vertex {
public:
    float x, y, z;
};

class Text {
public:
    float u, v;
};

class Normal {
public:
    float nx, ny, nz;
};

class Face {
public:
    std::vector<std::string> ups;
};


std::vector<int> get_ups(std::string str){
    std::vector<int> resault;
    std::string num;
    for(size_t i = 0; i < str.length(); i++){
        if(str[i] == '/'){
            resault.push_back(std::stoi(num));
            num = "";
        } else{
            num += str[i];
        }
    }
    
    return resault;
}


std::string parse_f(std::string str){
    for(size_t i = 0; i < str.length(); i++){
        if(str[i] == '/') str[i] = ' ';
    }
    return str;
}


void parse_obj(std::vector<Vertex> &vertices, std::vector<Text> &texts,
               std::vector<Normal> &normalises, std::vector<Face> &faces
    ){
                   
    std::ifstream file("cube.obj");
    std::ofstream out_file("parsed_cube.txt");
    std::string line;
    
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string type;
        iss >> type;

        if (type == "v") {
            float x, y, z;
            iss >> x >> y >> z;
            Vertex vertex = {x, y, z};
            vertices.push_back(vertex);
            out_file << "v " << x << " " << y << " " << z << std::endl;
            
        } else if (type == "vt") {
            float u, v;
            iss >> u >> v;
            Text text = {u, v};
            texts.push_back(text);
            out_file << "vt " << u << " " << v << std::endl;
            
        } else if (type == "vn") {
            float nx, ny, nz;
            iss >> nx >> ny >> nz;
            Normal normal = {nx, ny, nz};
            normalises.push_back(normal);
            out_file << "vn " << nx << " " << ny << " " << nz << std::endl;
            
        } else if (type == "f") {
            std::string v1, v2, v3;
            iss >> v1 >> v2 >> v3;
            Face face = {{parse_f(v1), parse_f(v2), parse_f(v3)}};
            faces.push_back(face);
            out_file << "f " << v1 << " " << v2 << " " << v3 << std::endl;
        }
    }
    file.close();
    out_file.close();
}

int main() {

    std::vector<Vertex> vertices;
    std::vector<Text> texts;
    std::vector<Normal> normalises;
    std::vector<Face> faces;
    parse_obj(vertices, texts, normalises, faces);
    
    for (size_t i = 0; i < vertices.size(); i++)
        std::cout << i + 1 << ". v " << vertices[i].x << " " << vertices[i].y << " " << vertices[i].z << std::endl;
        
    for (size_t i = 0; i < texts.size(); i++)
        std::cout << i + 1 << ". vt " << texts[i].u << " " << texts[i].v << std::endl;
    
    for (size_t i = 0; i < normalises.size(); i++)
        std::cout << i + 1 << ". vn " << normalises[i].nx << " " << normalises[i].ny << " " << normalises[i].nz << std::endl;
    
    for (size_t i = 0; i < faces.size(); i++){
        std::cout << i + 1 << ". f:" << std::endl;
        
        for(size_t j = 0; j < 3; j++){
            std::istringstream iss(faces[i].ups[j]);
            size_t vert_ind;
            size_t text_ind;
            size_t norm_ind;
            iss >> vert_ind >> text_ind >> norm_ind;
            
            std::cout << "\tv " << vertices[vert_ind - 1].x << " " << vertices[vert_ind - 1].y << " " << vertices[vert_ind - 1].z << std::endl;
            std::cout << "\tvt " << texts[text_ind - 1].u << " " << texts[text_ind - 1].v << std::endl;
            std::cout << "\tvn " << normalises[norm_ind - 1].nx << " " << normalises[norm_ind - 1].ny << " " << normalises[norm_ind - 1].nz << std::endl;
            std::cout << std::endl;
        }
    }
    
    
    return 0;
}
